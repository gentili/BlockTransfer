/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ca.mcpnet.blocktransfer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BTTileEntity implements org.apache.thrift.TBase<BTTileEntity, BTTileEntity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTTileEntity");

  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NBT_FIELD_DESC = new org.apache.thrift.protocol.TField("nbt", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BTTileEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BTTileEntityTupleSchemeFactory());
  }

  public BTiVector location; // required
  public ByteBuffer nbt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION((short)1, "location"),
    NBT((short)2, "nbt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION
          return LOCATION;
        case 2: // NBT
          return NBT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTiVector.class)));
    tmpMap.put(_Fields.NBT, new org.apache.thrift.meta_data.FieldMetaData("nbt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTTileEntity.class, metaDataMap);
  }

  public BTTileEntity() {
  }

  public BTTileEntity(
    BTiVector location,
    ByteBuffer nbt)
  {
    this();
    this.location = location;
    this.nbt = nbt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTTileEntity(BTTileEntity other) {
    if (other.isSetLocation()) {
      this.location = new BTiVector(other.location);
    }
    if (other.isSetNbt()) {
      this.nbt = org.apache.thrift.TBaseHelper.copyBinary(other.nbt);
;
    }
  }

  public BTTileEntity deepCopy() {
    return new BTTileEntity(this);
  }

  @Override
  public void clear() {
    this.location = null;
    this.nbt = null;
  }

  public BTiVector getLocation() {
    return this.location;
  }

  public BTTileEntity setLocation(BTiVector location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public byte[] getNbt() {
    setNbt(org.apache.thrift.TBaseHelper.rightSize(nbt));
    return nbt == null ? null : nbt.array();
  }

  public ByteBuffer bufferForNbt() {
    return nbt;
  }

  public BTTileEntity setNbt(byte[] nbt) {
    setNbt(nbt == null ? (ByteBuffer)null : ByteBuffer.wrap(nbt));
    return this;
  }

  public BTTileEntity setNbt(ByteBuffer nbt) {
    this.nbt = nbt;
    return this;
  }

  public void unsetNbt() {
    this.nbt = null;
  }

  /** Returns true if field nbt is set (has been assigned a value) and false otherwise */
  public boolean isSetNbt() {
    return this.nbt != null;
  }

  public void setNbtIsSet(boolean value) {
    if (!value) {
      this.nbt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((BTiVector)value);
      }
      break;

    case NBT:
      if (value == null) {
        unsetNbt();
      } else {
        setNbt((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION:
      return getLocation();

    case NBT:
      return getNbt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCATION:
      return isSetLocation();
    case NBT:
      return isSetNbt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BTTileEntity)
      return this.equals((BTTileEntity)that);
    return false;
  }

  public boolean equals(BTTileEntity that) {
    if (that == null)
      return false;

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_nbt = true && this.isSetNbt();
    boolean that_present_nbt = true && that.isSetNbt();
    if (this_present_nbt || that_present_nbt) {
      if (!(this_present_nbt && that_present_nbt))
        return false;
      if (!this.nbt.equals(that.nbt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BTTileEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BTTileEntity typedOther = (BTTileEntity)other;

    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNbt()).compareTo(typedOther.isSetNbt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNbt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nbt, typedOther.nbt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BTTileEntity(");
    boolean first = true;

    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nbt:");
    if (this.nbt == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.nbt, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' was not present! Struct: " + toString());
    }
    if (nbt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nbt' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (location != null) {
      location.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTTileEntityStandardSchemeFactory implements SchemeFactory {
    public BTTileEntityStandardScheme getScheme() {
      return new BTTileEntityStandardScheme();
    }
  }

  private static class BTTileEntityStandardScheme extends StandardScheme<BTTileEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTTileEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new BTiVector();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NBT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nbt = iprot.readBinary();
              struct.setNbtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTTileEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        struct.location.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nbt != null) {
        oprot.writeFieldBegin(NBT_FIELD_DESC);
        oprot.writeBinary(struct.nbt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTTileEntityTupleSchemeFactory implements SchemeFactory {
    public BTTileEntityTupleScheme getScheme() {
      return new BTTileEntityTupleScheme();
    }
  }

  private static class BTTileEntityTupleScheme extends TupleScheme<BTTileEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTTileEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.location.write(oprot);
      oprot.writeBinary(struct.nbt);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTTileEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.location = new BTiVector();
      struct.location.read(iprot);
      struct.setLocationIsSet(true);
      struct.nbt = iprot.readBinary();
      struct.setNbtIsSet(true);
    }
  }

}

