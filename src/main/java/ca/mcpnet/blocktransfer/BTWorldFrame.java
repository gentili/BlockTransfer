/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ca.mcpnet.blocktransfer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BTWorldFrame implements org.apache.thrift.TBase<BTWorldFrame, BTWorldFrame._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTWorldFrame");

  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCKDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("blockdata", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TILELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tilelist", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BTWorldFrameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BTWorldFrameTupleSchemeFactory());
  }

  public BTiVector size; // required
  public ByteBuffer blockdata; // required
  public List<BTTileEntity> tilelist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIZE((short)1, "size"),
    BLOCKDATA((short)2, "blockdata"),
    TILELIST((short)3, "tilelist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIZE
          return SIZE;
        case 2: // BLOCKDATA
          return BLOCKDATA;
        case 3: // TILELIST
          return TILELIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTiVector.class)));
    tmpMap.put(_Fields.BLOCKDATA, new org.apache.thrift.meta_data.FieldMetaData("blockdata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TILELIST, new org.apache.thrift.meta_data.FieldMetaData("tilelist", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTTileEntity.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTWorldFrame.class, metaDataMap);
  }

  public BTWorldFrame() {
  }

  public BTWorldFrame(
    BTiVector size,
    ByteBuffer blockdata,
    List<BTTileEntity> tilelist)
  {
    this();
    this.size = size;
    this.blockdata = blockdata;
    this.tilelist = tilelist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTWorldFrame(BTWorldFrame other) {
    if (other.isSetSize()) {
      this.size = new BTiVector(other.size);
    }
    if (other.isSetBlockdata()) {
      this.blockdata = org.apache.thrift.TBaseHelper.copyBinary(other.blockdata);
;
    }
    if (other.isSetTilelist()) {
      List<BTTileEntity> __this__tilelist = new ArrayList<BTTileEntity>();
      for (BTTileEntity other_element : other.tilelist) {
        __this__tilelist.add(new BTTileEntity(other_element));
      }
      this.tilelist = __this__tilelist;
    }
  }

  public BTWorldFrame deepCopy() {
    return new BTWorldFrame(this);
  }

  @Override
  public void clear() {
    this.size = null;
    this.blockdata = null;
    this.tilelist = null;
  }

  public BTiVector getSize() {
    return this.size;
  }

  public BTWorldFrame setSize(BTiVector size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public byte[] getBlockdata() {
    setBlockdata(org.apache.thrift.TBaseHelper.rightSize(blockdata));
    return blockdata == null ? null : blockdata.array();
  }

  public ByteBuffer bufferForBlockdata() {
    return blockdata;
  }

  public BTWorldFrame setBlockdata(byte[] blockdata) {
    setBlockdata(blockdata == null ? (ByteBuffer)null : ByteBuffer.wrap(blockdata));
    return this;
  }

  public BTWorldFrame setBlockdata(ByteBuffer blockdata) {
    this.blockdata = blockdata;
    return this;
  }

  public void unsetBlockdata() {
    this.blockdata = null;
  }

  /** Returns true if field blockdata is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockdata() {
    return this.blockdata != null;
  }

  public void setBlockdataIsSet(boolean value) {
    if (!value) {
      this.blockdata = null;
    }
  }

  public int getTilelistSize() {
    return (this.tilelist == null) ? 0 : this.tilelist.size();
  }

  public java.util.Iterator<BTTileEntity> getTilelistIterator() {
    return (this.tilelist == null) ? null : this.tilelist.iterator();
  }

  public void addToTilelist(BTTileEntity elem) {
    if (this.tilelist == null) {
      this.tilelist = new ArrayList<BTTileEntity>();
    }
    this.tilelist.add(elem);
  }

  public List<BTTileEntity> getTilelist() {
    return this.tilelist;
  }

  public BTWorldFrame setTilelist(List<BTTileEntity> tilelist) {
    this.tilelist = tilelist;
    return this;
  }

  public void unsetTilelist() {
    this.tilelist = null;
  }

  /** Returns true if field tilelist is set (has been assigned a value) and false otherwise */
  public boolean isSetTilelist() {
    return this.tilelist != null;
  }

  public void setTilelistIsSet(boolean value) {
    if (!value) {
      this.tilelist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((BTiVector)value);
      }
      break;

    case BLOCKDATA:
      if (value == null) {
        unsetBlockdata();
      } else {
        setBlockdata((ByteBuffer)value);
      }
      break;

    case TILELIST:
      if (value == null) {
        unsetTilelist();
      } else {
        setTilelist((List<BTTileEntity>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIZE:
      return getSize();

    case BLOCKDATA:
      return getBlockdata();

    case TILELIST:
      return getTilelist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIZE:
      return isSetSize();
    case BLOCKDATA:
      return isSetBlockdata();
    case TILELIST:
      return isSetTilelist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BTWorldFrame)
      return this.equals((BTWorldFrame)that);
    return false;
  }

  public boolean equals(BTWorldFrame that) {
    if (that == null)
      return false;

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    boolean this_present_blockdata = true && this.isSetBlockdata();
    boolean that_present_blockdata = true && that.isSetBlockdata();
    if (this_present_blockdata || that_present_blockdata) {
      if (!(this_present_blockdata && that_present_blockdata))
        return false;
      if (!this.blockdata.equals(that.blockdata))
        return false;
    }

    boolean this_present_tilelist = true && this.isSetTilelist();
    boolean that_present_tilelist = true && that.isSetTilelist();
    if (this_present_tilelist || that_present_tilelist) {
      if (!(this_present_tilelist && that_present_tilelist))
        return false;
      if (!this.tilelist.equals(that.tilelist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BTWorldFrame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BTWorldFrame typedOther = (BTWorldFrame)other;

    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockdata()).compareTo(typedOther.isSetBlockdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockdata, typedOther.blockdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTilelist()).compareTo(typedOther.isSetTilelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTilelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tilelist, typedOther.tilelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BTWorldFrame(");
    boolean first = true;

    sb.append("size:");
    if (this.size == null) {
      sb.append("null");
    } else {
      sb.append(this.size);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockdata:");
    if (this.blockdata == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.blockdata, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tilelist:");
    if (this.tilelist == null) {
      sb.append("null");
    } else {
      sb.append(this.tilelist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (size == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not present! Struct: " + toString());
    }
    if (blockdata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockdata' was not present! Struct: " + toString());
    }
    if (tilelist == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tilelist' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (size != null) {
      size.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTWorldFrameStandardSchemeFactory implements SchemeFactory {
    public BTWorldFrameStandardScheme getScheme() {
      return new BTWorldFrameStandardScheme();
    }
  }

  private static class BTWorldFrameStandardScheme extends StandardScheme<BTWorldFrame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTWorldFrame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.size = new BTiVector();
              struct.size.read(iprot);
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCKDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockdata = iprot.readBinary();
              struct.setBlockdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TILELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tilelist = new ArrayList<BTTileEntity>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  BTTileEntity _elem2; // required
                  _elem2 = new BTTileEntity();
                  _elem2.read(iprot);
                  struct.tilelist.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTilelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTWorldFrame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.size != null) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        struct.size.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blockdata != null) {
        oprot.writeFieldBegin(BLOCKDATA_FIELD_DESC);
        oprot.writeBinary(struct.blockdata);
        oprot.writeFieldEnd();
      }
      if (struct.tilelist != null) {
        oprot.writeFieldBegin(TILELIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tilelist.size()));
          for (BTTileEntity _iter3 : struct.tilelist)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTWorldFrameTupleSchemeFactory implements SchemeFactory {
    public BTWorldFrameTupleScheme getScheme() {
      return new BTWorldFrameTupleScheme();
    }
  }

  private static class BTWorldFrameTupleScheme extends TupleScheme<BTWorldFrame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTWorldFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.size.write(oprot);
      oprot.writeBinary(struct.blockdata);
      {
        oprot.writeI32(struct.tilelist.size());
        for (BTTileEntity _iter4 : struct.tilelist)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTWorldFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.size = new BTiVector();
      struct.size.read(iprot);
      struct.setSizeIsSet(true);
      struct.blockdata = iprot.readBinary();
      struct.setBlockdataIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tilelist = new ArrayList<BTTileEntity>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          BTTileEntity _elem7; // required
          _elem7 = new BTTileEntity();
          _elem7.read(iprot);
          struct.tilelist.add(_elem7);
        }
      }
      struct.setTilelistIsSet(true);
    }
  }

}

