/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ca.mcpnet.blocktransfer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BTWorldFrame implements org.apache.thrift.TBase<BTWorldFrame, BTWorldFrame._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTWorldFrame");

  private static final org.apache.thrift.protocol.TField XLENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlength", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField YLENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("ylength", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ZLENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("zlength", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BTWorldFrameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BTWorldFrameTupleSchemeFactory());
  }

  public int xlength; // required
  public int ylength; // required
  public int zlength; // required
  public ByteBuffer ids; // required
  public ByteBuffer metadata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    XLENGTH((short)1, "xlength"),
    YLENGTH((short)2, "ylength"),
    ZLENGTH((short)3, "zlength"),
    IDS((short)4, "ids"),
    METADATA((short)5, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // XLENGTH
          return XLENGTH;
        case 2: // YLENGTH
          return YLENGTH;
        case 3: // ZLENGTH
          return ZLENGTH;
        case 4: // IDS
          return IDS;
        case 5: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XLENGTH_ISSET_ID = 0;
  private static final int __YLENGTH_ISSET_ID = 1;
  private static final int __ZLENGTH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.XLENGTH, new org.apache.thrift.meta_data.FieldMetaData("xlength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YLENGTH, new org.apache.thrift.meta_data.FieldMetaData("ylength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZLENGTH, new org.apache.thrift.meta_data.FieldMetaData("zlength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTWorldFrame.class, metaDataMap);
  }

  public BTWorldFrame() {
  }

  public BTWorldFrame(
    int xlength,
    int ylength,
    int zlength,
    ByteBuffer ids,
    ByteBuffer metadata)
  {
    this();
    this.xlength = xlength;
    setXlengthIsSet(true);
    this.ylength = ylength;
    setYlengthIsSet(true);
    this.zlength = zlength;
    setZlengthIsSet(true);
    this.ids = ids;
    this.metadata = metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTWorldFrame(BTWorldFrame other) {
    __isset_bitfield = other.__isset_bitfield;
    this.xlength = other.xlength;
    this.ylength = other.ylength;
    this.zlength = other.zlength;
    if (other.isSetIds()) {
      this.ids = org.apache.thrift.TBaseHelper.copyBinary(other.ids);
;
    }
    if (other.isSetMetadata()) {
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(other.metadata);
;
    }
  }

  public BTWorldFrame deepCopy() {
    return new BTWorldFrame(this);
  }

  @Override
  public void clear() {
    setXlengthIsSet(false);
    this.xlength = 0;
    setYlengthIsSet(false);
    this.ylength = 0;
    setZlengthIsSet(false);
    this.zlength = 0;
    this.ids = null;
    this.metadata = null;
  }

  public int getXlength() {
    return this.xlength;
  }

  public BTWorldFrame setXlength(int xlength) {
    this.xlength = xlength;
    setXlengthIsSet(true);
    return this;
  }

  public void unsetXlength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XLENGTH_ISSET_ID);
  }

  /** Returns true if field xlength is set (has been assigned a value) and false otherwise */
  public boolean isSetXlength() {
    return EncodingUtils.testBit(__isset_bitfield, __XLENGTH_ISSET_ID);
  }

  public void setXlengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XLENGTH_ISSET_ID, value);
  }

  public int getYlength() {
    return this.ylength;
  }

  public BTWorldFrame setYlength(int ylength) {
    this.ylength = ylength;
    setYlengthIsSet(true);
    return this;
  }

  public void unsetYlength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YLENGTH_ISSET_ID);
  }

  /** Returns true if field ylength is set (has been assigned a value) and false otherwise */
  public boolean isSetYlength() {
    return EncodingUtils.testBit(__isset_bitfield, __YLENGTH_ISSET_ID);
  }

  public void setYlengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YLENGTH_ISSET_ID, value);
  }

  public int getZlength() {
    return this.zlength;
  }

  public BTWorldFrame setZlength(int zlength) {
    this.zlength = zlength;
    setZlengthIsSet(true);
    return this;
  }

  public void unsetZlength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZLENGTH_ISSET_ID);
  }

  /** Returns true if field zlength is set (has been assigned a value) and false otherwise */
  public boolean isSetZlength() {
    return EncodingUtils.testBit(__isset_bitfield, __ZLENGTH_ISSET_ID);
  }

  public void setZlengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZLENGTH_ISSET_ID, value);
  }

  public byte[] getIds() {
    setIds(org.apache.thrift.TBaseHelper.rightSize(ids));
    return ids == null ? null : ids.array();
  }

  public ByteBuffer bufferForIds() {
    return ids;
  }

  public BTWorldFrame setIds(byte[] ids) {
    setIds(ids == null ? (ByteBuffer)null : ByteBuffer.wrap(ids));
    return this;
  }

  public BTWorldFrame setIds(ByteBuffer ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public byte[] getMetadata() {
    setMetadata(org.apache.thrift.TBaseHelper.rightSize(metadata));
    return metadata == null ? null : metadata.array();
  }

  public ByteBuffer bufferForMetadata() {
    return metadata;
  }

  public BTWorldFrame setMetadata(byte[] metadata) {
    setMetadata(metadata == null ? (ByteBuffer)null : ByteBuffer.wrap(metadata));
    return this;
  }

  public BTWorldFrame setMetadata(ByteBuffer metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case XLENGTH:
      if (value == null) {
        unsetXlength();
      } else {
        setXlength((Integer)value);
      }
      break;

    case YLENGTH:
      if (value == null) {
        unsetYlength();
      } else {
        setYlength((Integer)value);
      }
      break;

    case ZLENGTH:
      if (value == null) {
        unsetZlength();
      } else {
        setZlength((Integer)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((ByteBuffer)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case XLENGTH:
      return Integer.valueOf(getXlength());

    case YLENGTH:
      return Integer.valueOf(getYlength());

    case ZLENGTH:
      return Integer.valueOf(getZlength());

    case IDS:
      return getIds();

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case XLENGTH:
      return isSetXlength();
    case YLENGTH:
      return isSetYlength();
    case ZLENGTH:
      return isSetZlength();
    case IDS:
      return isSetIds();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BTWorldFrame)
      return this.equals((BTWorldFrame)that);
    return false;
  }

  public boolean equals(BTWorldFrame that) {
    if (that == null)
      return false;

    boolean this_present_xlength = true;
    boolean that_present_xlength = true;
    if (this_present_xlength || that_present_xlength) {
      if (!(this_present_xlength && that_present_xlength))
        return false;
      if (this.xlength != that.xlength)
        return false;
    }

    boolean this_present_ylength = true;
    boolean that_present_ylength = true;
    if (this_present_ylength || that_present_ylength) {
      if (!(this_present_ylength && that_present_ylength))
        return false;
      if (this.ylength != that.ylength)
        return false;
    }

    boolean this_present_zlength = true;
    boolean that_present_zlength = true;
    if (this_present_zlength || that_present_zlength) {
      if (!(this_present_zlength && that_present_zlength))
        return false;
      if (this.zlength != that.zlength)
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BTWorldFrame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BTWorldFrame typedOther = (BTWorldFrame)other;

    lastComparison = Boolean.valueOf(isSetXlength()).compareTo(typedOther.isSetXlength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlength, typedOther.xlength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYlength()).compareTo(typedOther.isSetYlength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYlength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ylength, typedOther.ylength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZlength()).compareTo(typedOther.isSetZlength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZlength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zlength, typedOther.zlength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(typedOther.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, typedOther.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BTWorldFrame(");
    boolean first = true;

    sb.append("xlength:");
    sb.append(this.xlength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ylength:");
    sb.append(this.ylength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zlength:");
    sb.append(this.zlength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ids, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.metadata, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'xlength' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ylength' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'zlength' because it's a primitive and you chose the non-beans generator.
    if (ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ids' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTWorldFrameStandardSchemeFactory implements SchemeFactory {
    public BTWorldFrameStandardScheme getScheme() {
      return new BTWorldFrameStandardScheme();
    }
  }

  private static class BTWorldFrameStandardScheme extends StandardScheme<BTWorldFrame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTWorldFrame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // XLENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xlength = iprot.readI32();
              struct.setXlengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YLENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ylength = iprot.readI32();
              struct.setYlengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZLENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zlength = iprot.readI32();
              struct.setZlengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ids = iprot.readBinary();
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readBinary();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetXlength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'xlength' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYlength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ylength' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetZlength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zlength' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTWorldFrame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(XLENGTH_FIELD_DESC);
      oprot.writeI32(struct.xlength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YLENGTH_FIELD_DESC);
      oprot.writeI32(struct.ylength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZLENGTH_FIELD_DESC);
      oprot.writeI32(struct.zlength);
      oprot.writeFieldEnd();
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        oprot.writeBinary(struct.ids);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        oprot.writeBinary(struct.metadata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTWorldFrameTupleSchemeFactory implements SchemeFactory {
    public BTWorldFrameTupleScheme getScheme() {
      return new BTWorldFrameTupleScheme();
    }
  }

  private static class BTWorldFrameTupleScheme extends TupleScheme<BTWorldFrame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTWorldFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.xlength);
      oprot.writeI32(struct.ylength);
      oprot.writeI32(struct.zlength);
      oprot.writeBinary(struct.ids);
      oprot.writeBinary(struct.metadata);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTWorldFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.xlength = iprot.readI32();
      struct.setXlengthIsSet(true);
      struct.ylength = iprot.readI32();
      struct.setYlengthIsSet(true);
      struct.zlength = iprot.readI32();
      struct.setZlengthIsSet(true);
      struct.ids = iprot.readBinary();
      struct.setIdsIsSet(true);
      struct.metadata = iprot.readBinary();
      struct.setMetadataIsSet(true);
    }
  }

}

